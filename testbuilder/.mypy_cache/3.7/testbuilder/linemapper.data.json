{".class": "MypyFile", "_fullname": "testbuilder.linemapper", "_name": null, "is_stub": false, "names": {".class": "SymbolTable", "LineMapper": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "TypeInfo", "_promote": null, "abstract_attributes": [], "bases": ["ast.NodeVisitor"], "declared_metaclass": null, "defn": {".class": "ClassDef", "fullname": "testbuilder.linemapper.LineMapper", "name": "LineMapper", "type_vars": []}, "flags": [], "fullname": "testbuilder.linemapper.LineMapper", "metaclass_type": null, "metadata": {}, "module_name": "testbuilder.linemapper", "mro": ["testbuilder.linemapper.LineMapper", "ast.NodeVisitor", "builtins.object"], "names": {".class": "SymbolTable", "__init__": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["self"], "flags": [], "fullname": "testbuilder.linemapper.LineMapper.__init__", "name": "__init__", "type": {".class": "CallableType", "arg_kinds": [0], "arg_names": ["self"], "arg_types": ["testbuilder.linemapper.LineMapper"], "bound_args": [], "def_extras": {"first_arg": "self"}, "fallback": "builtins.function", "implicit": false, "is_classmethod_class": false, "is_ellipsis_args": false, "name": "__init__ of LineMapper", "ret_type": {".class": "NoneTyp"}, "variables": []}}}, "current_nodes": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "testbuilder.linemapper.LineMapper.current_nodes", "name": "current_nodes", "type": {".class": "Instance", "args": ["_ast.AST"], "type_ref": "builtins.list"}}}, "generic_visit": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "FuncDef", "arg_kinds": [0, 0], "arg_names": ["self", "node"], "flags": [], "fullname": "testbuilder.linemapper.LineMapper.generic_visit", "name": "generic_visit", "type": {".class": "CallableType", "arg_kinds": [0, 0], "arg_names": ["self", "node"], "arg_types": ["testbuilder.linemapper.LineMapper", "_ast.AST"], "bound_args": [], "def_extras": {"first_arg": "self"}, "fallback": "builtins.function", "implicit": false, "is_classmethod_class": false, "is_ellipsis_args": false, "name": "generic_visit of LineMapper", "ret_type": {".class": "NoneTyp"}, "variables": []}}}, "mapping": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "testbuilder.linemapper.LineMapper.mapping", "name": "mapping", "type": {".class": "Instance", "args": ["builtins.int", {".class": "Instance", "args": ["_ast.AST"], "type_ref": "builtins.list"}], "type_ref": "typing.MutableMapping"}}}, "nodeends": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "testbuilder.linemapper.LineMapper.nodeends", "name": "nodeends", "type": {".class": "Instance", "args": ["_ast.AST", "builtins.int"], "type_ref": "typing.MutableMapping"}}}}, "tuple_type": null, "type_vars": [], "typeddict_type": null}}, "List": {".class": "SymbolTableNode", "cross_ref": "builtins.list", "kind": "Gdef", "normalized": true}, "MMapping": {".class": "SymbolTableNode", "cross_ref": "typing.MutableMapping", "kind": "Gdef"}, "__doc__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": [], "fullname": "testbuilder.linemapper.__doc__", "name": "__doc__", "type": "builtins.str"}}, "__file__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": [], "fullname": "testbuilder.linemapper.__file__", "name": "__file__", "type": "builtins.str"}}, "__name__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": [], "fullname": "testbuilder.linemapper.__name__", "name": "__name__", "type": "builtins.str"}}, "__package__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": [], "fullname": "testbuilder.linemapper.__package__", "name": "__package__", "type": "builtins.str"}}, "ast": {".class": "SymbolTableNode", "cross_ref": "ast", "kind": "ModuleRef"}}, "path": "/home/andrew/Education/masters/research/testbuilder/linemapper.py"}
