#!/usr/bin/env python3
import ast
from dataclasses import dataclass
from difflib import unified_diff
from importlib import import_module
from importlib.machinery import ModuleSpec, SourceFileLoader
from importlib.util import module_from_spec
from multiprocessing import Pool
from pathlib import Path
from textwrap import indent
from types import ModuleType
from typing import Generator

import astor
from docopt import docopt
from logbook import Logger, StderrHandler

from mutator import KilledMutation, Mutator

StderrHandler(level="NOTICE").push_application()
log = Logger("bin/mutator")

DOC = """
Usage:
    mutator <file_test.py> <file.py> <test_attr> <mutant_attr>
"""


@dataclass
class MutantInfo:
    source: str
    mutated: str
    diff: str


class MutationRunner:
    def __init__(self, module_name, test_source, tree, source, test_attr, mutant_attr):
        self.module_name = module_name
        self.tree = tree
        self.source = source
        self.test_source = test_source
        self.test_attr = test_attr
        self.mutant_attr = mutant_attr

    def run_mutation(self, mutant):
        if isinstance(mutant, KilledMutation):
            return mutant
        loader = SourceFileLoader("test", self.test_source)
        spec = ModuleSpec("test", loader)
        tests = module_from_spec(spec)
        loader.exec_module(tests)
        code = load_module(mutant, self.module_name, "<mutation>")
        if isinstance(code, KilledMutation):
            return code
        if self.mutant_attr == "":
            setattr(tests, self.test_attr, code)
        else:
            attr = getattr(code, self.mutant_attr, None)
            if attr is None:
                return KilledMutation(
                    "attachment", self.mutant_attr + " doe s not exist"
                )
            setattr(tests, self.test_attr, attr)

        for name in dir(tests):
            if name.startswith("test"):
                try:
                    getattr(tests, name)()
                except Exception as e:
                    return KilledMutation("run", str(e))

        return self.find_mutation_diff(mutant)

    def find_mutation_diff(self, mutant):
        source_code = astor.to_source(self.tree)
        mutant_source = astor.to_source(mutant)
        diff = unified_diff(
            source_code.splitlines(),
            mutant_source.splitlines(),
            fromfile=self.source,
            tofile=self.source + " <mutant>",
        )
        diff = "\n".join(diff)
        return MutantInfo(source_code, mutant_source, diff)


def run_mutator(testfile, source, test_attr, mutant_attr):
    module_path = Path(source)
    module_name = module_path.stem
    with open(source) as fi:
        code = fi.read()

    missed_mutants = []
    tree = ast.parse(code)
    m = Mutator(tree)
    runner = MutationRunner(
        module_name=module_name,
        tree=tree,
        source=source,
        test_source=testfile,
        test_attr=test_attr,
        mutant_attr=mutant_attr,
    )
    p = Pool(8)
    results = list(map(runner.run_mutation, m))
    missed = 0
    killed = {}
    for mutant in results:
        if isinstance(mutant, KilledMutation):
            if mutant.stage in killed:
                killed[mutant.stage] += 1
            else:
                killed[mutant.stage] = 1
            continue
        else:
            missed += 1
        print("[38;5;51m======================================[0m")
        print("Missed mutant:")
        print(indent(mutant.diff, "   "))

    print("Killed mutants", killed)
    print("Total missed mutants:", missed)
    print("Total mutants", len(results))
    assert not missed_mutants


def load_module(tree: ast.Module, fullname: str, path: str) -> ModuleType:
    """
    Compiles and executes a module AST to create an actual module.

    Arguments:
        tree: An ast for the module

    Returns:
        The resulting module
    """
    # Derived from Python's loader code in Lib/importlib. See also the
    # spec in https://docs.python.org/3.5/reference/import.html#loaders
    compiled = compile(tree, path, "exec")
    loader = SourceFileLoader(fullname, path)
    spec = ModuleSpec(fullname, loader)
    module = module_from_spec(spec)
    try:
        exec(compiled, module.__dict__)
    except Exception as e:
        return KilledMutation("Module exec", str(e))
    return module


if __name__ == "__main__":
    opts = docopt(DOC)
    run_mutator(
        opts["<file_test.py>"],
        opts["<file.py>"],
        opts["<test_attr>"],
        opts["<mutant_attr>"],
    )
